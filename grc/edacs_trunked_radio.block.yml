# auto-generated by grc.converter

id: trunked_radio
label: Trunked Radio
category: '[EDACS]'

parameters:
-   id: talkgroup
    label: Talkgroup
    dtype: int
    default: '0'
-   id: freq_list
    label: Frequency List
    dtype: raw
    default: '[866.0375, 866.2875, 866.5375, 866.7875, 867.0375, 867.2875, 867.5375,
        867.7875, 868.0375, 868.2875, 868.5375, 868.7875, 866.0625, 866.3125, 866.5625,
        866.8125, 867.0625, 867.3125, 867.5625, 867.8125]'
-   id: center_freq
    label: Center Frequency
    dtype: float
    default: '867.4105'
-   id: source_rate
    label: Source Sample Rate
    dtype: int
    default: '4000000'
-   id: sink_rate
    label: Sink Sample Rate
    dtype: int
    default: '48000'
-   id: track_analog
    label: Track Analog
    dtype: bool
    default: 'True'
    options: ['True', 'False']
    option_labels: ['On', 'Off']
-   id: track_digital
    label: Track Digital
    dtype: bool
    default: 'False'
    options: ['True', 'False']
    option_labels: ['On', 'Off']
-   id: tone_threshold
    label: Tone Threshold
    dtype: float
    default: '0.1'
-   id: noise_threshold
    label: Noise Threshold
    dtype: float
    default: '5'
-   id: find_chan_nums
    label: Find Channel Numbers
    dtype: bool
    default: 'False'
    options: ['True', 'False']
    option_labels: ['On', 'Off']
-   id: voice_threshold
    label: Voice Threshold
    dtype: float
    default: '0.4'

inputs:
-   label: IQ In
    domain: stream
    dtype: complex
    vlen: 1

outputs:
-   label: Audio Out
    domain: stream
    dtype: float
    vlen: 1
-   label: ASCII Out
    domain: stream
    dtype: byte
    vlen: 1

templates:
    imports: from edacs import trunked_radio
    make: |-
        trunked_radio(
            center_freq=${center_freq},
            find_chan_nums=${find_chan_nums},
            freq_list=${freq_list},
            noise_threshold=${noise_threshold},
            sink_rate=${sink_rate},
            source_rate=${source_rate},
            talkgroup=${talkgroup},
            tone_threshold=${tone_threshold},
            track_analog=${track_analog},
            track_digital=${track_digital},
            voice_threshold=${voice_threshold}
        )
    callbacks:
    - set_center_freq(${center_freq})
    - set_freq_list(${freq_list})
    - set_noise_threshold(${noise_threshold})
    - set_sink_rate(${sink_rate})
    - set_source_rate(${source_rate})
    - set_talkgroup(${talkgroup})
    - set_tone_threshold(${tone_threshold})
    - set_find_lcns(${find_lcns})
    - set_track_analog(${track_analog})
    - set_track_digital(${track_digital})
    - set_voice_threshold(${voice_threshold})

documentation: "Description\n      The Trunked Radio block is a hierarchical block\
    \ used to track communications on a trunked radio system. Currently it supports\
    \ EDACS (both analog and digital ProVoice). \n\n    Ports:\n\n      There is one\
    \ input port that accepts complex values from the radio source and two output\
    \ ports. The first ouput port produces float values which are the voice samples,\
    \ while the other ouput port produces bytes that are ASCII characters which show\
    \ decoded control channel frames.\n\n\n    Parameters:\n\n      Talkgroup - The\
    \ talkgroup of interest. Composed of 11 bits where the first 3 most significant\
    \ bits represent the agency, the next 4 represent fleet and the last 4 represent\
    \ subfleet. The AFS hierarchy was implemented bi-directionally. This means that\
    \ if, for example, your input talkgroup translates into {A=2, F=1, S=0}, and {A=2,\
    \ F=1, S=1} is received, then the transmission will be heard. And if your input\
    \ talkgroup translates into {A=2, F=1, S=1}, and {A=2, F=1, S=0} is received,\
    \ the transmission will still be heard.\n\n      Frequency List (MHz) - The list\
    \ of channels on the system in megahertz. They must be entered in order of channel\
    \ number (index 0 is channel 1, index 1 is channel 2, etc). They can only be entered\
    \ out of order if 'Find Channel Numbers' is set 'On'.\n\n      Center Frequency\
    \ (MHz) - The frequency that your SDR is tuned to in megahertz.\n\n      Source\
    \ Sample Rate (Hz) - The input sample rate in hertz. \n\n      Sink Sample Rate\
    \ (Hz) - The output sample rate in hertz.\n\n      Track Analog - Accepts analog\
    \ transmission when turned on.\n\n      Track Digital - Accepts digital transmissions\
    \ when turned on.\n\n      Tone Threshold - Threshold for detecting the end of\
    \ transmission beeps at the end of a call. If transmissions are getting cut off\
    \ this value is too low, if the beeps are heard this value is too high. A slider\
    \ can be useful in determining this value.\n\n      Noise Threshold - Threshold\
    \ for detecting noise in the case of that the end of transmission beeps are missed.\
    \ If transmissions are getting interrupted and 'NOISY CHANNEL, MUTING...' messages\
    \ being printed out, then this value is too low. If the channel is getting stuck\
    \ on static this value is too high. A slider can be useful in determining this\
    \ value.\n\n      Find Channel Numbers - When turned on, automatically orders\
    \ the frequencies entered in 'Frequency List' by finding the correct channel number\
    \ associated with each frequency. This is done by looking at the signal strength\
    \ on each channel after getting a channel assignment. Since many radio's may be\
    \ active on the system at one time this will not get the correct channel number\
    \ instantly, but over time (~5-10 minutes) it will be narrowed down.\n\n     \
    \ Voice Threshold - The cut off value used in finding channel numbers for determing\
    \ if a channel is active or not."

file_format: 1
